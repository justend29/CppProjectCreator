#!/bin/bash
set -e

if [ -z "$1" ]; then
	echo -e "Must supply project name\nex. cpp_proj <proj> <target>"
	exit 1
fi
if [ -z "$2" ]; then
	echo -e "Must supply target name\nex. cpp_proj <proj> <target>"
	exit 1
fi

printColourized () {
	#$1 ansi escape sequence colour
	#$2 is the text to print
	printf  "$1 ${2} \e[0m"
}

#relative to root directory
dirsToMake=("include" "include/$1" "build" "src" "libs")
#ansi colours
red=$'\e[1;31m'
grn=$'\e[1;92m'
blu=$'\e[1;34m'
mag=$'\e[1;35m'
cyn=$'\e[1;36m'
white=$'\e[0m'

makeDir() {
	#$1 is relative path of desired directory
	if [[ -d "$(pwd)/$1" ]]; then
		printColourized ${cyn}  "$(pwd)/$1"
		echo -n " exists. Overwrite? [y/N]"
		read response
		if [ "$response" = "y" ]; then
			rm -rf "$(pwd)/$1"
			mkdir "$(pwd)/$1"
			echo "overwrote directory"
		else
			echo "skipping creation of directory"
		fi
	else 
		mkdir "$(pwd)/$1"
	fi
}

makeFile() {
	#$1 is relative path to desired file
	#$2 is contents of desired file
	if [ -f "$(pwd)/$1" ]; then
		printColourized ${grn}  "$(pwd)/$1"
		echo -n " exists. Overwrite? [y/N]"
		read response
		if [ "$response" = "y" ]; then
			printf "$2" > $1
			echo "overwrote file"
		else
			echo "skipping creation of file"
		fi
	else 
		printf "$2" > $1
	fi
}

#project directory structure
for directory in ${dirsToMake[@]}; do
	makeDir $directory
done

#git ignore
gitIgnoreBody=$(cat <<EOF
build/
compile_commands.json
*.zip
*.tar
*.o
EOF
)

makeFile ".gitignore" $gitIgnoreBody
chmod ug+w "$(pwd)/.gitignore"

#main file
mainBody=$(cat <<EOF
#include <$1Config.hpp>
int main() {
}
EOF
)
makeFile "$(pwd)/src/main.cpp" "$mainBody"

#config header
configBody=$(cat <<EOF
#cmakedefine $1_VERSION_MAJOR @$1_VERSION_MAJOR@
#cmakedefine $1_VERSION_MINOR @$1_VERSION_MINOR@
#cmakedefine $1_VERSION_PATCH @$1_VERSION_PATCH@
EOF
)

makeFile "$1Config.hpp.in" "$configBody"
chmod ug+w "$(pwd)/$1Config.hpp.in"

#cmake
cmakeVersion=$(cmake --version | grep version | cut -f 3 -d " ")
cmakeBody=$(cat <<EOF
cmake_minimum_required( VERSION $cmakeVersion )
project( $1 VERSION 0 )

# target
add_executable( $2 ./src/main.cpp )

configure_file( \${CMAKE_PROJECT_NAME}Config.hpp.in ../src/\${CMAKE_PROJECT_NAME}Config.hpp )
target_include_directories( $2 PUBLIC \"${PROJECT_BINARY_DIR}\" )

# flags
set( TARGET $2 PROPERTY CXX_STANDARD 17 )
set( TARGET $2 PROPERTY CXX_STANDARD_REQUIRED True )
if (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")
	target_compile_options( $2 -Wall -Wextra -Werror )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")
	target_compile_options( $2 PUBLIC -Wall -Wextra -Werror )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")
#	target_compile_options( $2 -Wall -Wextra -Werror )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")
#	target_compile_options( $2 -Wall -Wextra -Werror )
endif()

# include files
include_directories( ./include ./src )

# 3rd party libs

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
EOF
)


makeFile "CMakeLists.txt" "$cmakeBody"
chmod ug+w "$(pwd)/CMakeLists.txt"

#call cmake
cmake -B "$(pwd)/build/"
if [ ! -f "$(pwd)/compile_commands.json" ]; then
	ln -s "$(pwd)/build/compile_commands.json" "$(pwd)/compile_commands.json"
fi

#call git
if [ -d ".git" ]; then
	printColourized ${mag}  ".git"
	echo -n " exists. Call git init? [y/N]"
	read response
	if [ "$response" = "y" ]; then
		git init
	fi
else 
	git init
fi
