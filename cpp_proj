#!/bin/bash
# great cmake resources:
#   http://www.brianlheim.com/2018/04/09/cmake-cheat-sheet.html
#   https://cliutils.gitlab.io/modern-cmake/chapters/basics/structure.html
#   https://raymii.org/s/tutorials/Cpp_project_setup_with_cmake_and_unit_tests.html

mitLicense=$(cat <<EOF
MIT License
\n\n
Copyright <YEAR> <COPYRIGHT HOLDER>
\n\n
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
\n\n
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
\n\n
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
EOF
)


if [ -z "$1" ]; then
  echo -e "Must supply project name\nex. cpp_proj <proj> <target>"
  exit 1
fi
if [ -z "$2" ]; then
  echo -e "Must supply target name\nex. cpp_proj <proj> <target>"
  exit 1
fi

#ansi colours
red=$'\e[1;31m'
grn=$'\e[1;92m'
blu=$'\e[1;34m'
mag=$'\e[1;35m'
cyn=$'\e[1;36m'
ylw=$'\e[1;33m'
wht=$'\e[37m'
blk=$'\e[30m'
rst=$'\e[0m'

printColourized () {
  #$1 ansi escape sequence colour
  #$2 is the text to print
  printf  "$1 ${2} $rst"
}

#relative to root directory
dirsToMake=("include" "include/$1" "build" "src" "lib" "bin" "test" "docs" "cmake" "external" "app" )

makeDir() {
  #$1 is relative path of desired directory
  if [ -d "$(pwd)/$1" ]; then
    printColourized ${cyn}  "$(pwd)/$1"
    echo -n " exists. Overwrite? [y/N]"
    read response
    if [ "$response" = "y" ]; then
      rm -rf "$(pwd)/$1"
      mkdir "$(pwd)/$1"
      echo "overwrote directory"
    else
      echo "skipping creation of directory"
    fi
  else
    mkdir "$(pwd)/$1"
    echo "writing"
  fi
}

makeFile() {
  #$1 is relative path to desired file
  #$2 is contents of desired file
  if [ -f "$(pwd)/$1" ]; then
    printColourized ${grn}  "$(pwd)/$1"
    echo -n " exists. Overwrite? [y/N]"
    read response
    if [ "$response" = "y" ]; then
      echo -e "$2" > $1
      echo "overwrote file"
    else
      echo "skipping creation of file"
    fi
  else
    echo -e "$2" > $1
  fi
}

#project directory structure
for directory in ${dirsToMake[@]}; do
  makeDir $directory
done

#clang-format file
makeFile ".clang-format" "$(clang-format -style=google -dump-config)"

#git ignore
gitIgnoreBody=$(cat <<EOF
build/
bin/
compile_commands.json
*.zip
*.tar
*.o
*.swp
EOF
)
makeFile ".gitignore" "$gitIgnoreBody"
chmod ug+w "$(pwd)/.gitignore"

echo made git ignore

#README
# project readme
readmeBody="$(cat <<EOF
  # $1

  ## Notes

  By default, the Ninja build system and Catch2 test framework
  are used by this script. Catch2 will automatically be installed.

  ## Building

  **Running CMake** (Done initially by script)

  \`\`\`bash
  $ cmake -B ./build/ -GNinja
  \`\`\`

  **Compiling With Ninja**

  \`\`\`bash
  $ ninja -C ./build/
  \`\`\`

  **Running Catch2 Tests**

  \`\`\`bash

  $ ninja -C ./build/ test
  \`\`\`

  **Running Driver Program**

  \`\`\`bash
  $ ./bin/<proj_name>_driver
  \`\`\`

  ## Project Layout

  * **cmake directory** For git submodules
  * **external directory** For CMake modules
  * **app directory** For the project application
  An initial *main.cpp* file has been populated in this directory
  and is treated as a driver program in app/CMakeLists.txt
  for the other sources, which are bound as a static library
  * **include directory** For publically facing header files
  * **src directory** For the project's source files not in the app
  directory and the private header files. The sources here generate
  a static library and are linked to the driver program in app.
  src/CMakeLists.txt and app/CMakeLists.txt define these processes
  * **lib directory** For libraries compiled by the project, including
  that generated from the sources in src/
  * **build directory** For the build specific files

  Go update the LICENCE.md file with a preferred copywrite holder name if
  the default one is insufficient

  ## Great CMake Resources

  * [modern cmake](https://cliutils.gitlab.io/modern-cmake/chapters/basics/structure.html)
  * [quick cheat-sheet](http://www.brianlheim.com/2018/04/09/cmake-cheat-sheet.html)
  * [basic project example](https://raymii.org/s/tutorials/Cpp_project_setup_with_cmake_and_unit_tests.html)
EOF
)"
makeFile "README.md" "$readmeBody"
echo readme made

# licence
year=$(date +"%Y")
mitLicense=$(echo $mitLicense | sed --expression "s/<YEAR>/$year/")
mitLicense=$(echo $mitLicense | sed --expression "s/<COPYRIGHT HOLDER>/$USER/")
readmeBody=$(cat <<EOF
  # $1 - License
  $mitLicense
EOF
)
makeFile "LICENCE.md" "$readmeBody"

#tests
testFileBody=$(cat <<EOF
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
// don't write any test cases here
// https://github.com/catchorg/Catch2/blob/master/docs/slow-compiles.md
EOF
)
makeFile "test/main-test.cpp" "$testFileBody"

#main file
mainBody=$(cat <<EOF
#include "$1-config.hpp"
int main() {
}
EOF
)
makeFile "app/main.cpp" "$mainBody"

#project files
LS=$(ls -1q src/*.cpp > /dev/null 2>&1)
if [ $? -ne 0 ]; then # no *.cpp files found
  makeFile "src/$1.cpp" "// rename me to what your project needs"
fi

#config header
projectUpper=$(echo $1 | tr a-z A-Z | tr - _)
configBody=$(cat <<EOF
#define ${projectUpper}_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
#define ${projectUpper}_VERSION_MINOR @PROJECT_VERSION_MINOR@
#define ${projectUpper}_VERSION_PATCH @PROJECT_VERSION_PATCH@
#define ${projectUpper}_VERSION      "@PROJECT_VERSION@"
EOF
)
makeFile "cmake/$1-config.hpp.in" "$configBody"
chmod ug+w "$(pwd)/cmake/$1-config.hpp.in"

#cmake
# cmake project
cmakeVersion=$(cmake --version | grep version | cut -f 3 -d " ")
cmakeBody=$(cat <<EOF
cmake_minimum_required( VERSION $cmakeVersion )
project( $1 VERSION 0.0.0
            DESCRIPTION "$1"
            LANGUAGES CXX )

include( cmake/colourized.cmake )
colourized( "CMAKE_PROJECT_NAME: \${CMAKE_PROJECT_NAME}" \${MAG} )
colourized( "PROJECT_NAME: \${PROJECT_BINARY_DIR}" \${MAG} )
colourized( "PROJECT_SOURCE_DIR: \${PROJECT_SOURCE_DIR}" \${MAG} )
colourized( "PROJECT_BINARY_DIR: \${PROJECT_BINARY_DIR}" \${MAG} )

# Only if this is main project, not included through add_subdirectory
if( CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME )

  # append path to search for cmake modules
  set( CMAKE_MODULE_PATH "\${PROJECT_SOURCE_DIR}/cmake" \${CMAKE_MODULE_PATH} )

  # support IDE folders
  set_property( GLOBAL PROPERTY USE_FOLDERS ON )

  # turn off compiler specific extensions
  set( CMAKE_CXX_EXTENSIONS OFF )

  # must be done in main CMakeLists
  # enables testing and provides BUILD_TESTING option
  include( CTest )

  find_package( Doxygen )
  if( Doxygen_FOUND )
    add_subdirectory( docs )
  else()
    message( STATUS "Doxygen not found, not building docs" )
  endif()

endif()


if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  add_compile_options (-fdiagnostics-color=always)
  set( OPTS -Wall -Wextra -Werror -Wctor-dtor-privacy -Wno-init-list-lifetime
            -Wnoexcept -Weffc++ -Wstrict-null-sentinel -Wold-style-cast
            -Woverloaded-virtual -Wsign-promo )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
endif()
#currently set so everything uses same options
colourized( "Compile Options: \${OPTS}" \${YLW} )

include( FetchContent )
if( \${CMAKE_VERSION} VERSION_LESS 3.14 )
  include( cmake/add_FetchContent_MakeAvailable.cmake )
endif()

#FetchContent_Declare(
  #<name>
  #GIT_REPOSITORY <repo-url>
  #GIT_TAG        <tag>
#)
#FetchContent_MakeAvailable(
  #<name>
#)

if( (CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME) AND BUILD_TESTING)
    add_subdirectory( test )
endif()

# library code to compile
add_subdirectory( src )

# application code to compile
add_subdirectory( app )

configure_file(
  \${PROJECT_SOURCE_DIR}/cmake/\${CMAKE_PROJECT_NAME}-config.hpp.in
  \${PROJECT_SOURCE_DIR}/src/\${CMAKE_PROJECT_NAME}-config.hpp
)

# any 3rd party libs?
# any precompiled headers?
# target_precompile_headers( <target> PRIVATE <headers> )

set( CMAKE_EXPORT_COMPILE_COMMANDS ON )
EOF
)
makeFile "CMakeLists.txt" "$cmakeBody"
chmod ug+w "$(pwd)/CMakeLists.txt"

# cmake src
cmakeBody=$(cat <<EOF
# glob collection of src files not 100% reliable
file( GLOB_RECURSE SRCS LIST_DIRECTORIES false CONFIGURE_DEPENDS *.cpp )

# if there is a main.cpp, remove it
list( REMOVE_ITEM SRCS \${PROJECT_SOURCE_DIR}/src/main.cpp )

# headers won't affect library but will let IDEs find them
file( GLOB_RECURSE HEADERS LIST_DIRECTORIES false CONFIGURE_DEPENDS
      "*.hpp" "\${PROJECT_SOURCE_DIR}/include/\${PROJECT_NAME}/*.hpp" )

# only run if source files were found
list( LENGTH SRCS HAS_SOURCES )
if( \${HAS_SOURCES} GREATER 0 )
  add_library( $2 STATIC \${HEADERS} \${SRCS} )

  set_target_properties( $2
    PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED True
    ARCHIVE_OUTPUT_DIRECTORY "\${PROJECT_SOURCE_DIR}/lib"
    LIBRARY_OUTPUT_DIRECTORY "\${PROJECT_SOURCE_DIR}/lib"
    RUNTIME_OUTPUT_DIRECTORY "\${PROJECT_SOURCE_DIR}/bin"
  )

  # PUBLIC will propogate opts to all linked targets
  target_compile_options( $2 PUBLIC \${OPTS} )

  target_include_directories( $2 PUBLIC \${PROJECT_BINARY_DIR} \${PROJECT_SOURCE_DIR}/include \${PROJECT_SOURCE_DIR}/src )
endif()

set( CMAKE_EXPORT_COMPILE_COMMANDS ON )
EOF
)
makeFile "src/CMakeLists.txt" "$cmakeBody"
chmod ug+w "$(pwd)/src/CMakeLists.txt"

#cmake app
cmakeBody=$(cat <<EOF
set( TARGET_APP \${PROJECT_NAME}_driver )

file( GLOB_RECURSE APP_SRCS LIST_DIRECTORIES false CONFIGURE_DEPENDS *.cpp )

# only run if sources were found
list( LENGTH APP_SRCS HAS_SOURCES )
if( \${HAS_SOURCES} GREATER 0 )

  add_executable( \${TARGET_APP} \${APP_SRCS} )

  set_target_properties( \${TARGET_APP}
    PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED True
    ARCHIVE_OUTPUT_DIRECTORY "\${PROJECT_SOURCE_DIR}/lib"
    LIBRARY_OUTPUT_DIRECTORY "\${PROJECT_SOURCE_DIR}/lib"
    RUNTIME_OUTPUT_DIRECTORY "\${PROJECT_SOURCE_DIR}/bin"
  )

  target_link_directories( \${TARGET_APP} PRIVATE \${PROJECT_SOURCE_DIR}/lib )
  target_include_directories( \${TARGET_APP} PRIVATE \${PROJECT_SOURCE_DIR}/src \${PROJECT_SOURCE_DIR/include )
  target_link_libraries( \${TARGET_APP} PRIVATE $2 )

endif()

set( CMAKE_EXPORT_COMPILE_COMMANDS ON )
EOF
)
makeFile "app/CMakeLists.txt" "$cmakeBody"
chmod ug+w "$(pwd)/src/CMakeLists.txt"

#cmake test
cmakeBody=$(cat <<EOF
set( TARGET_TEST \${CMAKE_PROJECT_NAME}_test )

#using Catch2 testing header
FetchContent_Declare(
  catch2
  GIT_REPOSITORY https://github.com/catchorg/Catch2.git
  GIT_TAG v2.11.1
)
FetchContent_MakeAvailable( catch2 )

file( GLOB_RECURSE TEST_SRCS LIST_DIRECTORIES false CONFIGURE_DEPENDS *.cpp )

# only run if there are sources
list( LENGTH TEST_SRCS HAS_SOURCES )
if( \${HAS_SOURCES} GREATER 0 )

  add_executable( \${TARGET_TEST} \${TEST_SRCS} )

  # can use different options that the rest of the lib
  #colourized( "Test Compile Options: \${OPTS}" \${YLW} )
  target_compile_options( \${TARGET_TEST} PUBLIC \${OPTS} )

  set_target_properties( \${TARGET_TEST}
    PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED True
    RUNTIME_OUTPUT_DIRECTORY "\${PROJECT_SOURCE_DIR}/bin"
  )

  # target_include_directories( \${TARGET_TEST} PRIVATE \${PROJECT_SOURCE_DIR}/src \${PROJECT_SOURCE_DIR/include )
  target_link_directories( \${TARGET_TEST} PRIVATE \${PROJECT_SOURCE_DIR}/lib )
  target_link_libraries( \${TARGET_TEST} PRIVATE $2 Catch2::Catch2 )

  add_test( NAME \${TARGET_TEST} COMMAND \${TARGET_TEST} )

endif()

set( CMAKE_EXPORT_COMPILE_COMMANDS ON )
EOF
)
makeFile "test/CMakeLists.txt" "$cmakeBody"
chmod ug+w "$(pwd)/test/CMakeLists.txt"

#cmake docs
cmakeBody=$(cat <<EOF
set( DOXYGEN_EXTRACT_ALL YES )
set( DOXYGEN_BUILTIN_STL_SUPPORT YES )

file( GLOB_RECURSE PUBLIC_HEADERS LIST_DIRECTORIES false CONFIGURE_DEPENDS \${PROJECT_SOURCE_DIR}/include/\${PROJECT_NAME}/*.hpp )

doxygen_add_docs( docs
  \${PUBLIC_HEADERS}
  "\${CMAKE_CURRENT_SOURCE_DIR}/mainpage.md"
  WORKING_DIRECTORY
  "\${PROJECT_SOURCE_DIR}/include"
)

set( CMAKE_EXPORT_COMPILE_COMMANDS ON )
EOF
)
makeFile "docs/CMakeLists.txt" "$cmakeBody"
chmod ug+w "$(pwd)/docs/CMakeLists.txt"

#cmake helper
cmakeBody=$(cat <<EOF
set( BLU "$blu" CACHE STRING "AnsiBlue" )
set( RED "$red" CACHE STRING "AnsiRed" )
set( MAG "$mag" CACHE STRING "AnsiMagenta" )
set( CYN "$cyn" CACHE STRING "AnsiCyan" )
set( YLW "$ylw" CACHE STRING "AnsiYellow" )
set( WHT "$wht" CACHE STRING "AnsiWhite" )
set( BLK "$blk" CACHE STRING "AnsiBlack" )
set( RST "$rst" CACHE STRING "AnsiReset" )

if( NOT WIN32 )
  function( colourized MESSAGE COL )
    message( "\${COL}\${MESSAGE}\${RST}" )
  endfunction()
else()
  message( "Colourized message not supported on windows" )
  function( colourized MESSAGE COL )
    message( "\${MESSAGE}" )
  endfunction()
endif()
EOF
)
makeFile "cmake/colourized.cmake" "$cmakeBody"


#call cmake w/ ninja build sys
cmake -B "$(pwd)/build/" -GNinja
if [ ! -f "$(pwd)/compile_commands.json" ]; then
  ln -s "$(pwd)/build/compile_commands.json" "$(pwd)/compile_commands.json"
fi

#call git
if [ -d ".git" ]; then
  printColourized ${mag}  ".git"
  echo -n " exists. Call git init? [y/N]"
  read response
  if [ "$response" = "y" ]; then
    git init
  fi
else
  git init
fi
